<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ILUNP</title><link>https://ilunp.com/</link><description>Recent content on ILUNP</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Mon, 26 Feb 2024 02:48:31 +0800</lastBuildDate><atom:link href="https://ilunp.com/index.xml" rel="self" type="application/rss+xml"/><item><title>NPF 法则</title><link>https://ilunp.com/posts/npf-rule/</link><pubDate>Mon, 26 Feb 2024 02:48:31 +0800</pubDate><guid>https://ilunp.com/posts/npf-rule/</guid><description>NPF法则? 拍摄星空时会使用慢门来保证画面的曝光量，而我们的地球一直在转动，结果长时间曝光拍出来的星星会带着长长的拖影。为了解决这个问题，人们通过反复试验找到了一些规律性的方法。比如：300 法则、400 法则、500 法则。但是，这些规则是针对在胶片摄影时期，使用较高 ISO 下的 35mm 胶片而设计的规则。而当下大部分人使用的数码相机并不太适用。为了获得更准确的曝光时间，必须考虑焦距和光圈以及传感器尺寸和分辨率，这样的一种方法叫做 NPF 法则。
NPF 公式： $$ t=\frac{(35N+30p)}{f} $$
$t$ : 快门(s)，控制曝光时间 $N$ : 光圈值，控制进光量 $p$ : 像素间距(μm) $f$ : 焦距(mm)，控制视野范围 根据公式可以知道 快门 ($t$) 是由$N$ 、 $p$ 、 $f$ 决定，因此叫NPF法则。
像素间距公式： $$ p=\frac{传感器长边尺寸}{传感器长边像素}×1000 $$
以 NIKON Z6Ⅱ 的FX模式下为例： $$ p=\frac{36}{6048}×1000≈5.95(μm) $$ 以 NIKON Z7Ⅱ 的FX模式下为例： $$ p=\frac{36}{8256}×1000≈4.36(μm) $$ 其余的 $N$、$f$ 直接代入NPF法则公式。
计算工具： 这里提供了一个计算器
多数情况下 像素间距 ($p$) 值取 $5$ 即可 ( 35 + 30 ) 00 &amp;lt;= &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</description></item><item><title>HUGO 食用系列（二）</title><link>https://ilunp.com/posts/hugo/hugo_setup/</link><pubDate>Sun, 28 Jan 2024 22:49:31 +0800</pubDate><guid>https://ilunp.com/posts/hugo/hugo_setup/</guid><description>修改目录结构： 完成初始化 HUGO 后，生成默认的目录结构为：
my-site/ ... └── hugo.toml &amp;lt;-- 站点配置文件 为了使目录看起来清爽一些，创建一个父文件夹 config 和一个子文件夹 _default 并把所有的配置文件放在该目录中:
my-site/ ... ├── config/ &amp;lt;-- 站点配置文件 │ └── _default/ │ └── hugo.toml ... 站点配置文件 HUGO 完成初始化后默认创建的站点 hugo.toml 只有三行配置：
baseURL = &amp;#39;https://example.org/&amp;#39; languageCode = &amp;#39;en-us&amp;#39; title = &amp;#39;My New Hugo Site&amp;#39; 后续对站点设置时会添加更多的配置项，以 PaperMod 主题的部分配置为例：
baseURL = &amp;#39;https://example.org/&amp;#39; languageCode = &amp;#39;en-us&amp;#39; title = &amp;#39;My New Hugo Site&amp;#39; theme = &amp;#39;PaperMod&amp;#39; enableEmoji = true [markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true [params] DateFormat = &amp;#39;2006-01-02&amp;#39; defaultTheme = &amp;#39;auto&amp;#39; # defaultTheme = &amp;#39;light&amp;#39; # defaultTheme = &amp;#39;dark&amp;#39; ShowWordCount = true ShowReadingTime = true ShowPostNavLinks = true ShowCodeCopyButtons = true ShowAllPagesInArchive = true [params.</description></item><item><title>HUGO 食用系列（一）</title><link>https://ilunp.com/posts/hugo/hugo-install/</link><pubDate>Fri, 24 Nov 2023 18:07:22 +0800</pubDate><guid>https://ilunp.com/posts/hugo/hugo-install/</guid><description>采用 Hugo(Extended) + Github Pages + Github Action 部署方案。
优雅的在 Windows 中安装 HUGO 环境： 现在可以使用 WinGet 包管理器来安装 HUGO 所需的基础环境，只需要在终端（PowerShell）中分别运行以下命令，等待片刻即可：
# 安装 Hugo Extended winget install Hugo.Hugo.Extended # 安装 Git winget install -e --id Git.Git 安装 Github Desktop 方便文件更改前后的对比，当然 VSCode 也可以做到这些。 # 安装 Github Desktop winget install -e --id GitHub.GitHubDesktop 如果遇到问题，请确认您使用的 Windows 版本安装了 WinGet 包管理器。
如果没有安装 WinGet 包管理器，请立刻使用传统方法安装 HUGO 环境，不值得过多纠结。
为 HUGO 创建 Github Pages 仓库： 在 Github 中创建一个名为 &amp;lt;username&amp;gt;.github.io 的存储库。</description></item><item><title>HUGO</title><link>https://ilunp.com/posts/hugo/hugo-hello/</link><pubDate>Fri, 10 Nov 2023 00:42:18 +0800</pubDate><guid>https://ilunp.com/posts/hugo/hugo-hello/</guid><description>Hello World</description></item></channel></rss>